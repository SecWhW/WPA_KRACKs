theory wpa_gtk_init

begin

functions: KDF/1, N/1, snenc/4, sndec/2, S/1, MIC/2
builtins: symmetric-encryption, multiset, natural-numbers
equations: sndec(snenc(message, key, Nonce, IVnat), key) = message
/*
restriction Eq:
    "All x y #i. Eq(x,y) @ i ==> x = y"

restriction Neq:
    "All x y #i. Neq(x,y) @ i ==> not(x = y)"
*/
restriction OnlyOneAssociate:
    "All suppID authID PMK tid1 tid2 #i #j.
		Associate(authID, suppID, tid1, PMK) @ i & Associate(authID, suppID, tid2, PMK) @ j 
		==> #i = #j & tid1 = tid2 "

restriction OnlyOneSupp:
    "All suppID1 suppID2 #i #j.
		Supp_Creat(suppID1) @ i & Supp_Creat(suppID2) @ j 
		==> #i = #j & suppID1 = suppID2 "

restriction OnlyOneAuth:
    "All ID1 ID2 #i #j.
		Auth_Creat(ID1) @ i & Auth_Creat(ID2) @ j 
		==> #i = #j & ID1 = ID2 "

restriction OnlyOnePMK:
    "All PMK1 PMK2 #i #j.
		PMK_Gen(PMK1) @ i & PMK_Gen(PMK2) @ j 
		==> #i = #j & PMK1 = PMK2 "

restriction AuthSndGtkAgain:
    "All suppID authID tid ctr gtk loop ctr1 #i #j. not(ctr=ctr1) & 
		Auth_Snd_GTK_Again(authID, suppID, tid, ctr, loop, gtk) @ i  & 
		Auth_Snd_GTK_Again(authID, suppID, tid, ctr1, loop, gtk) @ j
		==> (#i = #j)"
/*
restriction MemoryCanBeFreedOnlyOnce:
    "All pointer #i #j. Free(pointer) @ i & Free(pointer) @ j ==> #i = #j"

restriction MemoryCanBeReadOnlyOnce:
    "All pointer #i #j. Read(pointer) @ i & Read(pointer) @ j ==> #i = #j"
*/
//****************************************************************
/* BEGIN Setup */

rule Supp_Create:
    [ Fr(~suppID) ] 
    --[ Supp_Creat(~suppID) ]-> 
    [ !Supp(~suppID)
    , Out(~suppID) ] 

rule Auth_Create:
    [ Fr(~authID) , Fr(~x) ] 
    --[ Auth_Creat(~authID) ]->
    [ !Auth(~authID) 
    , Out(~authID) ]

rule Auth_Supp_PMK_TID:
	[ Fr(~PMK), !Auth(~authID), !Supp(~suppID)]
	--[ PMK_Gen(~PMK) ]->
	[!PMKey(~PMK, ~authID, ~suppID, 'NULL')]

rule Auth_Associate_With_Supp:
	let 
		GTK_WNM_Keys = <~gtk, ~gtk1, ~gtk2, ~wnm1, ~wnm2, '1'>
	in 
	[ !PMKey(~PMK, ~authID, ~suppID, 'NULL')
	, Fr(~tid), Fr(~gtk), Fr(~gtk1), Fr(~gtk2),  Fr(~wnm1), Fr(~wnm2)
	, Fr(~ptk), Fr(~oldctr), Fr(~AuthIV), Fr(~SuppIV), Fr(~point), Fr(~Loop)
	]
    --[ Associate(~authID, ~suppID, ~tid, ~PMK) ]->
    [ AuthGTK('INIT_GTK', ~authID, ~suppID, ~tid, ~ptk, ~gtk, ~oldctr, ~Loop, ~SuppIV, 1:nat, ~AuthIV, 1:nat)
	, SuppGTK('INIT_GTK', ~suppID, ~authID, ~tid, ~ptk, ~gtk, ~oldctr, ~Loop, ~AuthIV, 1:nat, ~SuppIV, 1:nat)
	, !PMKey(~PMK, ~authID, ~suppID, ~tid), !GTK_Shared_Data('INIT', ~suppID, ~authID, ~tid, ~ptk, GTK_WNM_Keys, ~point)
    ]

//*******************************************************************
//GTK handshake process, the earliest version lacks security checks.

rule Auth_Snd_Gtk:
    let 
		M1 = snenc(<'gtk_m1', ~gKey, S(ctr)>, ~ptk, AuthIV, N(%AIV))
		//MIC_M1 = MIC(M1, ~ptk)
		n1 = (%AIV %+ 1:nat)
    in
    [ AuthGTK('INIT_GTK', ~authID, ~suppID, ~tid, ~ptk, oldgtk, ctr, ~loop, SuppIV, %PIV, AuthIV, %AIV)
	, Fr(~gKey)
	]
    --[ Auth_Snd_GTK(~authID, ~suppID, ~tid, S(ctr), ~loop, ~gKey)
	  ]->
    [ AuthGTK('GTK_NEGOTIATING', ~authID, ~suppID, ~tid, ~ptk, ~gKey, S(ctr), ~loop, SuppIV, %PIV, AuthIV, n1)
	, Out(M1)]

rule Auth_Snd_Gtk_Repeat:
    let 
		M1 = snenc(<'gtk_m1', gtk, S(ctr)>, ~ptk, AuthIV, N(%AIV))
		//MIC_M1 = MIC(M1, ~ptk)
		n1 = (%AIV %+ 1:nat)
    in
    [ AuthGTK('GTK_NEGOTIATING', ~authID, ~suppID, ~tid, ~ptk, gtk, ctr, ~loop, SuppIV, %PIV, AuthIV, %AIV)
	]
    --[ Auth_Snd_GTK_Again(~authID, ~suppID, ~tid, S(ctr), ~loop, gtk)
	  ]->
    [ AuthGTK('GTK_NEGOTIATING', ~authID, ~suppID, ~tid, ~ptk, gtk, S(ctr), ~loop, SuppIV, %PIV, AuthIV, n1)
	, Out(M1)[+]]

rule Supp_Rcv_Gtk:
    let 
		M1 = snenc(<'gtk_m1', gKey, S(ctr)>, ~ptk, newAuthIV, N(%newAIV))//检查输入ctr为S(ctr)
		M2 = snenc(<'gtk_m2', S(ctr)>, ~ptk, SuppIV, N(%PIV))
		n1 = (%PIV %+ 1:nat)
    in
    [ SuppGTK('INIT_GTK', ~suppID, ~authID, ~tid, ~ptk, ~gtk, ctr, ~loop, AuthIV, %AIV, SuppIV, %PIV)
	, In(M1)
	]
    --[ Supp_Install_GTK(~suppID, ~authID, ~tid, S(ctr), ~loop, gKey)
		//, Neq(gKey, gtk1), Neq(gKey, gtk2)
	  ]->
    [ SuppGTK('GTK_NEGOTIATING', ~suppID, ~authID, ~tid, ~ptk, gKey, S(ctr), ~loop, newAuthIV, %newAIV, SuppIV, n1)
	, SuppGTK('Wait_GTKData', ~suppID, ~authID, ~tid, ~ptk, gKey, S(ctr), ~loop, newAuthIV, %newAIV, SuppIV, n1)
	, Out(M2)]

rule Supp_Rcv_Gtk_Again:
    let 
		M1 = snenc(<'gtk_m1', gKey, S(ctr)>, ~ptk, newAuthIV, N(%newAIV))
		M2 = snenc(<'gtk_m2', S(ctr)>, ~ptk, SuppIV, N(%PIV))
		n1 = (%PIV %+ 1:nat)
    in
    [ SuppGTK('GTK_NEGOTIATING', ~suppID, ~authID, ~tid, ~ptk, ~gtk, ctr, ~loop, AuthIV, %AIV, SuppIV, %PIV)
	, In(M1)
	]
    --[ Supp_Install_GTK_Again(~suppID, ~authID, ~tid, S(ctr), ~loop, gKey)
		//, Neq(gKey, gtk1), Neq(gKey, gtk2)
	  ]->
    [ SuppGTK('Wait_GTKData', ~suppID, ~authID, ~tid, ~ptk, gKey, S(ctr), ~loop, newAuthIV, %newAIV, SuppIV, n1)
	, Out(M2)]

rule Supp_Rcv_Gtk_Command:
    let 
		M1 = snenc(<'gtk_data', GtkData>, gtk, '0', N(1:nat))
    in
    [ SuppGTK('Wait_GTKData', ~suppID, ~authID, ~tid, ~ptk, gtk, S(ctr), ~loop, AuthIV, %AIV, SuppIV, %PIV), In(M1)]
    --[ Supp_Rcv_Command(~suppID, ~authID, ~tid, S(ctr), ~loop, gtk, GtkData)
	  ]->
	 [ SuppGTK('Done_GTK', ~suppID, ~authID, ~tid, ~ptk, gtk, S(ctr), ~loop, AuthIV, %AIV, SuppIV, %PIV) 
	 ]

rule Auth_Rcv_GtkM2:
    let 
		M2 = snenc(<'gtk_m2', newctr>, ~ptk, newSuppIV, N(%newPIV))
		//MIC_M2 = MIC(M2, ~ptk)
		GtkComm = snenc(<'gtk_data', ~GtkData>, gtk, '0', N(1:nat))
    in
    [ AuthGTK('GTK_NEGOTIATING', ~authID, ~suppID, ~tid, ~ptk, gtk, S(ctr), ~loop, SuppIV, %PIV, AuthIV, %AIV)
	, In(M2), Fr(~GtkData)
	]
    --[ Auth_Snd_Command(~authID, ~suppID, ~tid, S(ctr), ~loop, gtk, ~GtkData)
	  ]->
    [ AuthGTK('Done_GTK', ~authID, ~suppID, ~tid, ~ptk, gtk, S(ctr), ~loop, newSuppIV, %newPIV, AuthIV, %AIV), Out(GtkComm)]

rule Auth_Supp_Gtk_ReInit:
    [ SuppGTK('Done_GTK', ~suppID, ~authID, ~tid, ~ptk, gtk, ctr1, ~loop, newAuthIV, %newAIV, SuppIV, %PIV)  
	, AuthGTK('Done_GTK', ~authID, ~suppID, ~tid, ~ptk, gtk, ctr2, ~loop, newSuppIV, %newPIV, AuthIV, %AIV)
	, Fr(~newloop), Fr(~ctr)
	]
    --[ Auth_Supp_GTKReinit(~authID, ~suppID, ~tid, ~loop, gtk)
	  ]->
    [ AuthGTK('INIT_GTK', ~authID, ~suppID, ~tid, ~ptk, gtk, S(~ctr), ~newloop, newSuppIV, %newPIV, AuthIV, %AIV)
	, SuppGTK('INIT_GTK', ~suppID, ~authID, ~tid, ~ptk, gtk, S(~ctr), ~newloop, newAuthIV, %newAIV, SuppIV, %PIV) 
	]


//*******************************************************************

lemma Association_created [reuse]:
    "All authID suppID tid PMK #i.
	Associate(authID, suppID, tid, PMK) @ i
     ==> (Ex #j. j < i & Auth_Creat(authID) @ j) &
         (Ex #k. k < i & Supp_Creat(suppID) @ k)"

lemma Association_is_unique [reuse, use_induction, heuristic=C]:
    "All authID1 authID2 tID suppID1 suppID2 PMK1 PMK2 #i #j.
     Associate(authID1, suppID1, tID, PMK1) @ i &
     Associate(authID2, suppID2, tID, PMK2) @ j 
     ==> #i = #j"

lemma Auth_Snd_GTK_Entry [reuse, use_induction, heuristic=S]:
    "All suppID authID tid ctr loop gtk #i.
     Auth_Snd_GTK_Again(authID, suppID, tid, ctr, loop, gtk) @ i 
     ==> (Ex ctr1 #j. Auth_Snd_GTK(authID, suppID, tid, ctr1, loop, gtk) @ j & (j < i) )"

lemma Auth_Snd_GTK_unique [reuse, use_induction, heuristic=S]:
    "All suppID authID tid ctr ctr1 loop gtk #i #j.
     Auth_Snd_GTK(authID, suppID, tid, ctr, loop, gtk) @ i & 
	 Auth_Snd_GTK(authID, suppID, tid, ctr1, loop, gtk) @ j
     ==> (#i = #j)"

lemma gtk_rekeys_attack [use_induction, heuristic=S]:
	"All suppID authID tid ctr1 ctr2 gtk GtkData1 GtkData2 loop #i #j. (i < j) & 
			Supp_Rcv_Command(suppID, authID, tid, ctr1, loop, gtk, GtkData1) @ i & 
			Supp_Rcv_Command(suppID, authID, tid, ctr2, loop, gtk, GtkData2) @ j 
							==> not(GtkData1 = GtkData2)"

end

/*

==============================================================================
summary of summaries:

analyzed: WPA_GTK_Init_Attack.spthy

  Association_created (all-traces): verified (6 steps)
  Association_is_unique (all-traces): verified (4 steps)
  Auth_Snd_GTK_Entry (all-traces): verified (10 steps)
  Auth_Snd_GTK_unique (all-traces): verified (4 steps)
  gtk_rekeys_attack (all-traces): falsified - found trace (16 steps)

==============================================================================

real    0m4.083s
user    0m26.111s
sys     0m10.584s
*/
