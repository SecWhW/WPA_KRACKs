theory wpa_ciphertext_handshake

begin

functions: KDF/1, N/1, snenc/4, sndec/2, S/1, MIC/2
builtins: symmetric-encryption, multiset, natural-numbers
equations: sndec(snenc(message, key, Nonce, IVnat), key) = message

restriction Eq:
    "All x y #i. Eq(x,y) @ i ==> x = y"

restriction ReplayCounterM3:
    "All suppID authID tid ANonce SNonce ctr gKey gtk_ctr #i.
		Supp_Rec_M3(suppID, authID, tid, ANonce, SNonce, ctr, <gKey,gtk_ctr>) @ i
		==> not Ex #j. (j < i) & SuppSeesCtr(tid, ctr) @ j "//& ctr << S(S(S(S('1'))))"

restriction AuthSndM3Again:
    "All suppID authID tid ANonce SNonce ctr gKey gtk_ctr ctr1 #i #j. not(ctr=ctr1) & 
		Auth_Snd_M3Again(authID, suppID, tid, ANonce, SNonce, ctr, <gKey,gtk_ctr>) @ i  & 
		Auth_Snd_M3Again(authID, suppID, tid, ANonce, SNonce, ctr1, <gKey,gtk_ctr>) @ j
		==> (#i = #j)
		"
restriction SuppRecM3Again:
    "All suppID authID tid ANonce SNonce ctr ctr1 gKey gKey1 gtk_ctr #i #j. not(ctr=ctr1) & 
		Supp_Rec_M3Again(suppID, authID, tid, ANonce, SNonce, ctr, <gKey,gtk_ctr>) @ i & 
		Supp_Rec_M3Again(suppID, authID, tid, ANonce, SNonce, ctr1, <gKey1,gtk_ctr>) @ j
		==> (#i = #j)
		"

//****************************************************************
/* BEGIN Setup */

rule Supp_Create:
    [ Fr(~suppID) ] 
    --[ Supp_Creat(~suppID) ]-> 
    [ !Supp(~suppID)
    , Out(~suppID) ] 

rule Auth_Create:
    [ Fr(~authID) , Fr(~x) ] 
    --[ Auth_Creat(~authID) ]->
    [ !Auth(~authID) 
    , Out(~authID) ]

rule Auth_Supp_PMK_TID:
	[ Fr(~PMK), !Auth(~authID), !Supp(~suppID)] 
	--[ PMK_Gen(~PMK) ]->
	[!PMKey(~PMK, ~authID, ~suppID, 'NULL')]

rule Auth_Associate_With_Supp:
	[ !PMKey(~PMK, ~authID, ~suppID, 'NULL')
	, Fr(~tid), Fr(~gtk), Fr(~ptk)
	]
    --[ Associate(~authID, ~suppID, ~tid, ~PMK) ]->
    [ AuthState('INIT_R1_SA', ~authID, ~suppID, ~tid, ~ptk, ~gtk, 'ANonce', 'SNonce', 'Ctr', 'NULL', 1:nat, 'NULL', 1:nat)
    , SuppState('INIT_R1_SA', ~suppID, ~authID, ~tid, ~ptk, ~gtk, 'ANonce', 'SNonce', 'Ctr', 'NULL', 1:nat, 'NULL', 1:nat)
	, !PMKey(~PMK, ~authID, ~suppID, ~tid), !GTKdata_4way(<~gtk, 1:nat, ~tid>)
	, !Auth_State(~authID, ~suppID, ~tid, ~PMK, <~gtk, 1:nat>, <~ptk, 'NULL', 1:nat>)
	, !Supp_State(~suppID, ~authID, ~tid, ~PMK, <~gtk, 1:nat>, <~ptk, 'NULL', 1:nat>)
    ]

rule Auth_Snd_M1:
	let 
		m1 = <'1', ~ANonce, S(~ctr)>
		M1 = snenc(m1, ~ptk, ~IV, N(%pIV)) //~IV, together with N(%pIV), forms a natural number.
		n1 = (%pIV %+ 1:nat)
	in
    [ AuthState('INIT_R1_SA', ~authID, ~suppID, ~tid, ~ptk, ~gtk, 'ANonce', 'SNonce', 'Ctr', 'NULL', 1:nat, 'NULL', %pIV)
	, Fr(~ANonce), Fr(~ctr), Fr(~IV)]
    --[ Auth_Sends_M1(~authID, ~suppID, ~tid, ~ANonce, S(~ctr)) , EncWithPtk(M1)
      ]->
    [ AuthState('PTK_START', ~authID, ~suppID, ~tid, ~ptk, ~gtk, ~ANonce, 'SNonce', S(~ctr), 'NULL', 1:nat, ~IV, n1)
    , Out(M1) ]

rule Supp_RcvM1_SndM2:
	let 
		m1 = <'1', ANonce, S(ctr)>
		M2 = snenc(<'2', S(ctr),~SNonce>, ~ptk, ~IV, N(%pIV))
		MIC_M2 = MIC(M2, ~ptk)
		n1 = (%pIV %+ 1:nat)
	in 
    [ SuppState('INIT_R1_SA', ~suppID, ~authID, ~tid, ~ptk, ~gtk, 'ANonce', 'SNonce', 'Ctr', 'NULL', 1:nat, 'NULL', %pIV)
	, In(snenc(m1, ~ptk, AuthIV, N(%AIV)))[no_precomp] , Fr(~SNonce), Fr(~IV)
    ]
    --[ Supp_Rcv_M1_Snd_M2(~suppID, ~authID, ~tid, ANonce, ~SNonce, S(ctr))
	, EncWithPtk(M2)
      ]->
    [ SuppState('PTK_START', ~suppID, ~authID, ~tid, ~ptk, ~gtk, ANonce, ~SNonce, S(ctr), AuthIV, %AIV, ~IV, n1) 
    , Out(<M2, MIC_M2>) ]

rule Auth_RcvM2_SndM3:
    let 
		M2 = snenc(<'2', S(~ctr), SNonce>, ~ptk, SuppIV, N(%SIV))
		MIC_M2 = MIC(M2, ~ptk)
		M3 = snenc(<'3', S(S(~ctr)), ~gKey, N(1:nat)>, ~ptk, ~IV, N(%pIV)) 
		MIC_M3 = MIC(M3, ~ptk)
		n1 = (%pIV %+ 1:nat)
    in
    [ AuthState('PTK_START', ~authID, ~suppID, ~tid, ~ptk, ~gKey, ~ANonce, 'SNonce', S(~ctr), 'NULL', 1:nat, ~IV, %pIV)
	, In(<M2, X>)[no_precomp]
	]
    --[ Auth_Rcv_M2_Snd_M3(~authID, ~suppID, ~tid, ~ANonce, SNonce, S(S(~ctr)), <~gKey,N(1:nat)>),
		Eq(X, MIC_M2), EncWithPtk(M3)
	  ]->
    [ AuthState('PTK_CALC_NEGOTIATING', ~authID, ~suppID, ~tid, ~ptk, ~gKey, ~ANonce, SNonce, S(S(~ctr)), SuppIV, %SIV, ~IV, n1)
	, Out(<M3, MIC_M3>)
	]

rule Auth_Snd_M3_repeat:
    let 
        M3 = snenc(<'3', S(S(ctr)), ~gKey, N(1:nat)>, ~ptk, ~IV, N(%pIV))
		MIC_M3 = MIC(M3, ~ptk)
		n1 = (%pIV %+ 1:nat)
    in
    [ AuthState('PTK_CALC_NEGOTIATING', ~authID, ~suppID, ~tid, ~ptk, ~gKey, ~ANonce, SNonce, S(ctr), SuppIV, %SIV, ~IV, %pIV)
    ]
    --[ Auth_Snd_M3Again(~authID, ~suppID, ~tid, ~ANonce, SNonce, S(S(ctr)), <~gKey,N(1:nat)>), EncWithPtk(M3)
      ]->
    [ AuthState('PTK_CALC_NEGOTIATING', ~authID, ~suppID, ~tid, ~ptk, ~gKey, ~ANonce, SNonce, S(S(ctr)), SuppIV, %SIV, ~IV, n1)
    , Out(<M3, MIC_M3>) ]

rule Supp_Rcv_M3:
    let 
        M3 = snenc(<'3', S(ctr), gKey, N(1:nat)>, ~ptk, AuthIV, N(%AIV))
		MIC_M3 = MIC(M3, ~ptk)
    in
    [ SuppState('PTK_START', ~suppID, ~authID, ~tid, ~ptk, ~gtk, ANonce, ~SNonce, ctr, AuthIV, %oldAIV, ~IV, %pIV)	
	, In(<M3, X>)[no_precomp] ]
    --[ Supp_Rec_M3(~suppID, ~authID, ~tid, ANonce, ~SNonce, S(ctr), <gKey, N(1:nat)>)
      , Eq(X, MIC_M3), SuppSeesCtr(~tid, S(ctr)) ]->
    [ SuppState('PTK_CALC_NEGOTIATING', ~suppID, ~authID, ~tid, ~ptk, gKey, ANonce, ~SNonce, S(ctr), AuthIV, %AIV, ~IV, %pIV)
		]

rule Supp_Rcv_M3_repeat:
    let 
		M3 = snenc(<'3', S(ctr), gKey, N(1:nat)>, ~ptk, AuthIV, N(%AIV))
		MIC_M3 = MIC(M3, ~ptk)
    in
    [ SuppState('PTK_INIT_DONE', ~suppID, ~authID, ~tid, ~ptk, gtk, ANonce, ~SNonce, ctr, AuthIV, %oldAIV, ~IV, %pIV)		
	, In(<M3, X>)[no_precomp] ]
    --[ Supp_Rec_M3Again(~suppID, ~authID, ~tid, ANonce, ~SNonce, S(ctr), <gKey,N(1:nat)>) 
      , Eq(X, MIC_M3), SuppSeesCtr(~tid, S(ctr)), SuppSeesAuthpIV(~suppID, ~authID, ~tid, ANonce, ~SNonce, S(ctr), AuthIV, %AIV)
	  ]->
    [ SuppState('PTK_CALC_NEGOTIATING', ~suppID, ~authID, ~tid, ~ptk, gKey, ANonce, ~SNonce, S(ctr), AuthIV, %AIV, ~IV, %pIV)
	]

rule Supp_Install_Key_Snd_EncM4:
    let 
        newPTK = KDF(<~PMK, ANonce, ~SNonce>)
		Reset_IV = N(1:nat)
		M4 = snenc(<'4', S(ctr)>, ~ptk, ~IV, N(%pIV))
        MIC_M4 = MIC(M4, ~ptk)
		n1 = (%pIV %+ 1:nat)
		Data = snenc(<'data', ~message>, newPTK, '0', Reset_IV)
    in
    [ SuppState('PTK_CALC_NEGOTIATING', ~suppID, ~authID, ~tid, ~ptk, gKey, ANonce, ~SNonce, S(ctr), AuthIV, %AIV, ~IV, %pIV)
	  , !PMKey(~PMK, ~authID, ~suppID, ~tid)
	  , Fr(~message) 
    ]
    --[ Supp_InstallKey_Snd_M4(~suppID, ~authID, ~PMK, ~tid, <gKey,N(1:nat)>, <newPTK, Reset_IV>)
	  , EncWithPtk(Data) , EncWithPtk(M4) 
       ]->
    [ SuppState('PTK_INIT_DONE', ~suppID, ~authID, ~tid, ~ptk, gKey, ANonce, ~SNonce, S(ctr), AuthIV, %AIV, ~IV, n1) 
      , Out(<M4, MIC_M4>) , !Supp_State(~suppID, ~authID, ~tid, ~PMK, <gKey, 1:nat>, <newPTK, ~IV, 1:nat>)
	  , Supp_WNM(~suppID, ~authID, ~PMK, ~tid, newPTK)	
	  , Out(Data)[+]
    ]

rule Auth_Rcv_M4_Install_Key:
    let 
        newPTK = KDF(<~PMK, ~ANonce, SNonce>)
		M4 = snenc(<'4', S(ctr)>, ~ptk, SuppIV, N(%SIV))
        MIC_M4 = MIC(M4, ~ptk)
		Reset_IV = N(1:nat)
		n1 = (%pIV %+ 1:nat)
    in
    [ AuthState('PTK_CALC_NEGOTIATING', ~authID, ~suppID, ~tid, ~ptk, ~gKey, ~ANonce, SNonce, S(ctr), SuppIV, %oldSIV, ~IV, n1)
	, !PMKey(~PMK, ~authID, ~suppID, ~tid)
	, In(<M4, X>)[no_precomp, -] , !PMKey(~PMK, ~authID, ~suppID, ~tid)
    ]
    --[ Auth_Installkey(~authID, ~suppID, ~tid, ~ANonce, SNonce, S(ctr), <~gKey,N(1:nat)>)
      , Eq(X, MIC_M4)
    ]->
    [ AuthState('PTK_INIT_DONE', ~authID, ~suppID, ~tid, newPTK, ~gKey, ~ANonce, SNonce, S(ctr), SuppIV, %SIV, ~IV, n1)
	, !Auth_State(~authID, ~suppID, ~tid, ~PMK, <~gKey, 1:nat>, <newPTK,~IV, Reset_IV>)
    , Auth_WNM(~authID, ~suppID, ~PMK, ~tid, newPTK)
    ]

//*******************************************************************


lemma Association_created [reuse]:
    "All authID suppID tid PMK #i.
	Associate(authID, suppID, tid, PMK) @ i
     ==> (Ex #j. j < i & Auth_Creat(authID) @ j) &
         (Ex #k. k < i & Supp_Creat(suppID) @ k)"

lemma Association_is_unique [reuse, use_induction, heuristic=C]:
    "All authID1 authID2 tID suppID1 suppID2 PMK1 PMK2 #i #j.
     Associate(authID1, suppID1, tID, PMK1) @ i &
     Associate(authID2, suppID2, tID, PMK2) @ j 
     ==> #i = #j"

lemma Auth_Snd_M3_Loop [reuse, use_induction, heuristic=S]:
    "All suppID authID tid ANonce SNonce ctr gKey #i. 
		Auth_Snd_M3Again(authID, suppID, tid, ANonce, SNonce, ctr, <gKey,N(1:nat)>) @ i
     ==> (Ex ctr1 #j . (j < i) & 
           Auth_Rcv_M2_Snd_M3(authID, suppID, tid, ANonce, SNonce, ctr1, <gKey,N(1:nat)>) @ j )"

lemma Auth_Snd_M3_unique_for_ANonce [reuse, use_induction, heuristic=S]:
    "All suppID authID tid1 tid2 ANonce SNonce1 SNonce2 ctr1 ctr2 gKey1 gKey2 #i #j. 
		Auth_Rcv_M2_Snd_M3(authID, suppID, tid1, ANonce, SNonce1, ctr1, <gKey1,N(1:nat)>) @ i &
		Auth_Rcv_M2_Snd_M3(authID, suppID, tid2, ANonce, SNonce2, ctr2, <gKey2,N(1:nat)>) @ j 
     ==> (#i = #j) "

lemma Supp_Rcv_M3_Loop [reuse, use_induction, heuristic=S]:
    "All suppID authID tid ANonce SNonce ctr gKey #i. 
		Supp_Rec_M3Again(suppID, authID, tid, ANonce, SNonce, ctr, <gKey,N(1:nat)>) @ i
     ==> (Ex ctr1 #j . (j < i) &
           Supp_Rec_M3(suppID, authID, tid, ANonce, SNonce, ctr1, <gKey,N(1:nat)>) @ j )
		   "

lemma Supp_Rcv_M3_unique_for_SNonce [reuse, use_induction, heuristic=S]:
    "All suppID authID tid1 tid2 ANonce1 ANonce2 SNonce ctr1 ctr2 gKey1 gKey2 #i #j. 
		Supp_Rec_M3(suppID, authID, tid1, ANonce1, SNonce, ctr1, <gKey1,N(1:nat)>) @ i &
		Supp_Rec_M3(suppID, authID, tid2, ANonce2, SNonce, ctr2, <gKey2,N(1:nat)>) @ j 
     ==> (#i = #j) "

lemma krack_attack_ptk1 [use_induction, heuristic=S]:
	"All m1 m2 key nonce IV1 IV2 #j1 #j2. EncWithPtk(snenc(m1, key, nonce, IV1)) @ j1 
							& EncWithPtk(snenc(m2, key, nonce, IV2)) @ j2 & not(#j1=#j2) & not(m1=m2)
							==> not(IV1=IV2)"
/*

==============================================================================
summary of summaries:

analyzed: WPA_ciphertext_handshake_init.spthy

  Association_created (all-traces): verified (6 steps)
  Association_is_unique (all-traces): verified (4 steps)
  Auth_Snd_M3_Loop (all-traces): verified (8 steps)
  Auth_Snd_M3_unique_for_ANonce (all-traces): verified (10 steps)
  Supp_Rcv_M3_Loop (all-traces): verified (19 steps)
  Supp_Rcv_M3_unique_for_SNonce (all-traces): verified (10 steps)
  krack_attack_ptk1 (all-traces): falsified - found trace (21 steps)

==============================================================================

real    0m12.336s
user    1m16.410s
sys     0m28.905s
*/	  
end
